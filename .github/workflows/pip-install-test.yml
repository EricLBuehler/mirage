name: "PIP Install Test"
on:
  workflow_run:
    workflows: ["PyPI Deploy"]
    types:
      - completed
  pull_request:
  push:
    branches:
      - "main"
  workflow_dispatch:

concurrency:
  group: pip-install-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  pip-install-mirage:
    # only run if the PyPI Deploy workflow has completed successfully
    if: ${{ github.event_name != 'workflow_run' || github.event.workflow_run.conclusion == 'success' }}
    name: Install Mirage with pip
    runs-on: ubuntu-22.04
    defaults:
      run:
        shell: bash -l {0}  # Used to activate conda environment
    steps:
      - name: Checkout code repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Free space on runner
        run: .github/workflows/helpers/free_space_on_runner.sh

      - name: Install CUDA
        uses: Jimver/cuda-toolkit@v0.2.16
        id: cuda-toolkit
        with:
          cuda: "12.1.1"
          # Disable caching as it doesn't significantly improve performance
          use-github-cache: "false"

      - name: Install system dependencies
        run: .github/workflows/helpers/install_dependencies.sh

      - name: Install conda and Mirage dependencies
        uses: conda-incubator/setup-miniconda@v3
        with:
          activate-environment: mirage
          environment-file: conda/mirage.yml
          auto-activate-base: false

      - name: Build and Install Mirage
        run: |
          # Set appropriate CUDA architecture
          export MIRAGE_CUDA_ARCH=80
          
          # If this job was triggered by PyPI Deploy workflow, install from PyPI
          if [[ "${{ github.event_name }}" == "workflow_run" ]]; then
            echo "Installing Mirage from PyPI (after PyPI Deploy workflow)"
            pip install mirage-project
          else
            echo "Installing Mirage from local source"
            pip install . --verbose
          fi
          
          # Remove build folder to check if installed version can run independently
          rm -rf build

      - name: Check Mirage module availability in Python
        run: |
          export LD_LIBRARY_PATH="/usr/lib:/usr/lib/x86_64-linux-gnu:${LD_LIBRARY_PATH}"
          export LD_LIBRARY_PATH="$CUDA_PATH/lib64/stubs:$LD_LIBRARY_PATH"
          sudo ln -s "$CUDA_PATH/lib64/stubs/libcuda.so" "$CUDA_PATH/lib64/stubs/libcuda.so.1"
          python -c 'import mirage; print("Mirage imported successfully")' 